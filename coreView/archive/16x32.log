DAT             org     0

entry           rdlong  scrn, par wz
                mov     text, scrn
        if_z    jmp     #entry

                shr     text, #16

:loop           rdbyte  char, text wz
        if_z    jmp     #:done

                call    #emit
                add     scrn, #2                ' dst
                add     text, #1                ' src
                jmp     #:loop

:done           wrlong  zero, par
                jmp     #entry

' char: $00..$FF
' scrn: destination address (2n)

emit            ror     char, #1                ' - %c0000000_00000000_00000000_0ccccccc
                or      addr, #$100             ' - %c0000000_00000000_00000001_0ccccccc
                shl     addr, #7 wc             ' c %00000000_00000000_10cccccc_c0000000
                muxc    shft, #1                ' even/odd extractor

loop            rdlong  data, addr
shft            shr     data, #1

                shr     data, #2 wc             ' extract bit 0 (left most)
                rcr     trgt, #1                ' insert (packed) into target
                shr     data, #2 wc
                rcr     trgt, #1
                shr     data, #2 wc
                rcr     trgt, #1
                shr     data, #2 wc
                rcr     trgt, #1

                shr     data, #2 wc             ' bit 4
                rcr     trgt, #1
                shr     data, #2 wc
                rcr     trgt, #1
                shr     data, #2 wc
                rcr     trgt, #1
                shr     data, #2 wc
                rcr     trgt, #1

                shr     data, #2 wc             ' bit 8
                rcr     trgt, #1
                shr     data, #2 wc
                rcr     trgt, #1
                shr     data, #2 wc
                rcr     trgt, #1
                shr     data, #2 wc
                rcr     trgt, #1

                shr     data, #2 wc             ' bit 12
                rcr     trgt, #1
                shr     data, #2 wc
                rcr     trgt, #1
                shr     data, #2 wc
                rcr     trgt, #1
                shr     data, #1 wc
                rcr     trgt, #17               ' push through to bit 15

                add     addr, i16s4 wc          ' advance source and loop

                wrword  trgt, scrn
        if_nc   add     scrn, #16               ' next line (y++)
        if_nc   jmp     #loop                   ' for all lines

                sub     scrn, #16*31            ' restore destination
emit_ret        ret

i16s4           long    16 << 23 | 4

char            res     alias
addr            res     1
data            res     1
scrn            res     1
trgt            res     1

text            res     1

                fit

CON
  zero          = $1F0                          ' par (dst only)
  alias         = 0

DAT
